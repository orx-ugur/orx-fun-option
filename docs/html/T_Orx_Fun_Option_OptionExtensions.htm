<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>OptionExtensions Class</title><meta name="Title" content="OptionExtensions" /><meta name="Help.Id" content="T:Orx.Fun.Option.OptionExtensions" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Orx.Fun.Option" /><meta name="guid" content="T_Orx_Fun_Option_OptionExtensions" /><meta name="Description" content="Extension methods for the option type ." /><meta name="tocFile" content="../toc/IDA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><a target="_blank" rel="noopener noreferrer" href="https://github.com/orxfun?tab=repositories"><img alt="orx" style="height: 50px;" src="../icons/orx-logo.png" /></a></div><div id="DocumentationTitle" class="level-item">Orx.Fun.Option (C#)</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Option<wbr />Extensions Class</h1><div class="summary">
            Extension methods for the option type <a href="T_Orx_Fun_Option_Opt_1.htm">Opt<span id="LST1D349A6_0" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1D349A6_1" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="N_Orx_Fun_Option.htm">Orx.Fun.Option</a><br /><strong>Assembly:</strong> Orx.Fun.Option (in Orx.Fun.Option.dll) Version: 1.0.0<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="identifier">OptionExtensions</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">OptionExtensions</span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDAEASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="M_Orx_Fun_Option_OptionExtensions_Flatten__1.htm">Flatten<span id="LST1D349A6_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1D349A6_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Flattens the option of option of <span class="parameter">T</span>.
            Maps Opt&lt;Opt&lt;T&gt;&gt; to Opt&lt;T&gt; as follows:
            <ul><li>None =&gt; None&lt;T&gt;(),</li><li>Some(None&lt;T&gt;()) =&gt; None&lt;T&gt;(),</li><li>Some(Some(T)) =&gt; Some(T).</li></ul><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Assert(None&lt;Opt&lt;char&gt;&gt;().Flatten() == None&lt;char&gt;());
Assert(Some(None&lt;char&gt;()).Flatten() == None&lt;char&gt;());
Assert(Some(Some('c')).Flatten() == Some('c'));</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_OptionExtensions_Map__3.htm">Map<span id="LST1D349A6_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1, T2, TOut<span id="LST1D349A6_5" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Allows an option of a tuple (t1, t2) to map with a function taking two arguments t1 and t2.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static int Add(int a, int b) =&gt; a + b;

var numbers = Some((1, 2));
var sum = numbers.Map(Add);
Assert(sum == Some(3));</code></pre></div></div>
            
            This is mostly useful in enabling function composition.
            </td></tr><tr><td><a href="M_Orx_Fun_Option_OptionExtensions_None__1.htm">None<span id="LST1D349A6_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1D349A6_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Creates an option of <span class="parameter">T</span> as None variant.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var noneInt = None&lt;int&gt;();
Assert(noneInt.IsNone);

// also:
Opt&lt;string&gt; name = default;
Assert(name.IsNone);</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_OptionExtensions_Some__1.htm">Some<span id="LST1D349A6_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1D349A6_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Creates an option of <span class="parameter">T</span> as Some variant with the given <span class="parameter">value</span>.
            However, if the <span class="parameter">value</span> is null, it will map into None.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Opt&lt;double&gt; number = Some(42.5);
Assert(number.IsSome and number.Unwrap() == 42.5);

// on the other hand:
string name = null;
Opt&lt;string&gt; optName = Some(name);
Assert(optName.IsNone);</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_OptionExtensions_SomeIf__1_1.htm">SomeIf<span id="LST1D349A6_10" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1D349A6_11" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Boolean, T)</a></td><td>
            Creates a result of <span class="parameter">T</span> as Some variant with value <span class="parameter">value</span> if the <span class="parameter">someCondition</span> holds.
            Otherwise, it will return the None variant.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">string team = "secret";
int score = 42;

Opt&lt;string&gt; winner = SomeIf(score &gt; 30, team);
Assert(winner == Some(team));

Opt&lt;string&gt; loser = SomeIf(score &lt; 40, team);
Assert(loser.IsNone);</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_OptionExtensions_SomeIf__1.htm">SomeIf<span id="LST1D349A6_12" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1D349A6_13" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Boolean, Func<span id="LST1D349A6_14" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1D349A6_15" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Lazy-in-evaluating-value counterpart of <a href="M_Orx_Fun_Option_OptionExtensions_SomeIf__1_1.htm">SomeIf<span id="LST1D349A6_16" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1D349A6_17" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Boolean, T)</a>.
            </td></tr><tr><td><a href="M_Orx_Fun_Option_OptionExtensions_SomeIfNotnull__1.htm">SomeIfNotnull<span id="LST1D349A6_18" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1D349A6_19" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Creates an option of <span class="parameter">T</span> as Some variant with the given <span class="parameter">value</span>.
            However, if the <span class="parameter">value</span> is null, it will map into None.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">string name = null;
static string? GetName(int id)
    =&gt; id == 0 ? "Mr Crabs" : null;
Opt&lt;string&gt; optName = GetName(0).SomeIfNotnull();
Assert.Equal(Some("Mr Crabs"), optName);

optName = GetName(42).SomeIfNotnull();
Assert.True(optName.IsNone);</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="N_Orx_Fun_Option.htm">Orx.Fun.Option Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column">https://github.com/orxfun/orx-fun-option<div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:orx.ugur.arikan%40gmail.com?Subject=Orx.Fun.Option%20(C#)">orx.ugur.arikan@gmail.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>