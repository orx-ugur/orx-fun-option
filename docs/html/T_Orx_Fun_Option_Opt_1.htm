<!DOCTYPE html []><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Opt&lt;T&gt; Structure</title><meta name="Title" content="Opt&lt;T&gt;" /><meta name="Help.Id" content="T:Orx.Fun.Option.Opt`1" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Orx.Fun.Option" /><meta name="guid" content="T_Orx_Fun_Option_Opt_1" /><meta name="Description" content="Option type which can be either of the two variants: Some(value-of-) or None." /><meta name="tocFile" content="../toc/IDA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><a target="_blank" rel="noopener noreferrer" href="https://github.com/orxfun?tab=repositories"><img alt="orx" style="height: 50px;" src="../icons/orx-logo.png" /></a></div><div id="DocumentationTitle" class="level-item">Orx.Fun.Option (C#)</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Opt<span id="LST94168003_0" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">T</span><span id="LST94168003_1" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span> Structure</h1><div class="summary">
            Option type which can be either of the two variants: Some(value-of-<span class="parameter">T</span>) or None.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="N_Orx_Fun_Option.htm">Orx.Fun.Option</a><br /><strong>Assembly:</strong> Orx.Fun.Option (in Orx.Fun.Option.dll) Version: 1.1.0<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">struct</span> <span class="identifier">Opt</span>&lt;T&gt; : <span class="identifier">IEquatable</span>&lt;<span class="identifier">Opt</span>&lt;T&gt;&gt;
</code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">Opt<span id="LST94168003_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST94168003_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></span></dd></dl><dl class="implementsList"><dt>Implements</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.iequatable-1" target="_blank" rel="noopener noreferrer">IEquatable</a><span id="LST94168003_4" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink">Opt</span><span id="LST94168003_5" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink"><span class="typeparameter">T</span></span><span id="LST94168003_6" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span><span id="LST94168003_7" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span></dd></dl><h4>Type Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">T</span></dt><dd>Any T.</dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Constructors</h2><div id="IDBGASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="M_Orx_Fun_Option_Opt_1__ctor.htm">Opt<span id="LST94168003_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST94168003_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            Option type of <span class="parameter">T</span>: either None or Some value.
            Parameterless ctor returns None; better use <a href="M_Orx_Fun_Option_OptionExtensions_Some__1.htm">Some<span id="LST94168003_10" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST94168003_11" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(T)</a> or <a href="M_Orx_Fun_Option_OptionExtensions_None__1.htm">None<span id="LST94168003_12" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST94168003_13" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST94168003_14" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a> to construct options by adding `using static OptRes.Ext`.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDYGASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="P_Orx_Fun_Option_Opt_1_IsNone.htm">IsNone</a></td><td>
            Returns whether the option is None or not.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var noneInt = None&lt;int&gt;();
Assert(noneInt.IsNone);</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDCGASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="M_Orx_Fun_Option_Opt_1_And__1.htm">And<span id="LST94168003_15" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T2<span id="LST94168003_16" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Combines two options: this and <span class="parameter">other</span> as follows:
            <ul><li>returns Some of a tuple of both values if both options are Some;</li><li>returns None otherwise.</li></ul><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var combined = Some(12).And(Some(true));
Assert.Equal(Some((12, true)), combined);

combined = Some(12).And(None&lt;bool&gt;());
Assert.True(combined.IsNone);

combined = None&lt;int&gt;().And(Some(true));
Assert.True(combined.IsNone);

combined = None&lt;int&gt;().And(None&lt;bool&gt;());
Assert.True(combined.IsNone);</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_AsNullable.htm">AsNullable</a></td><td>
            Converts the option to nullable of T.
            </td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_Do.htm">Do</a></td><td>
            Runs <span class="parameter">action</span>(Unwrap()) only if IsSome; and returns itself back.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// the logging call will only be made if the result of GetOptionalUser is Some of a user.
// Since Do returns back the option, it can still be assigned to var 'user'.
Opt&lt;User&gt; user = GetOptionalUser().Do(u =&gt; Log.Info($"User '{u.Name}' grabbed"));</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_DoIfNone.htm">DoIfNone</a></td><td>
            Runs <span class="parameter">actionOnNone</span>() only if IsNone; and returns itself back.
            Counterpart of <a href="M_Orx_Fun_Option_Opt_1_Do.htm">Do(Action<span id="LST94168003_17" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST94168003_18" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a> for the None variant.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// the logging call will only be made if the result of GetOptionalUser is None.
// Since DoIfNone returns back the option, it can still be assigned to var 'user'.
Opt&lt;User&gt; user = GetOptionalUser().DoIfNone(() =&gt; Log.Warning("User could not be read"));</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_Equals_1.htm">Equals(Object)</a></td><td>
            Returns whether this option is equal to the <span class="parameter">other</span>.
            <br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.valuetype.equals#system-valuetype-equals(system-object)" target="_blank" rel="noopener noreferrer">ValueType<span id="LST94168003_19" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Equals(Object)</a>)</td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_Equals.htm">Equals(Opt<span id="LST94168003_20" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST94168003_21" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns true if both values are <a href="P_Orx_Fun_Option_Opt_1_IsNone.htm">IsNone</a>; or both <a href="F_Orx_Fun_Option_Opt_1_IsSome.htm">IsSome</a> and their unwrapped values are equal; false otherwise.
            </td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_FlatMap__1.htm">FlatMap<span id="LST94168003_22" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST94168003_23" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LST94168003_24" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T, Opt<span id="LST94168003_25" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST94168003_26" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST94168003_27" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns None when IsNone; <span class="parameter">map</span>(val) when IsSome flattening the result.
            Shorthand combining Map and Flatten calls.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Opt&lt;User&gt; GetOptionalUser() {
    // method that tries to get the user, which can be omitted.
    ...
}
static Opt&lt;string&gt; GetNickname(User user) {
    // method that tries to get the nickname of the passed-in user; which is optional
    ...
}
Opt&lt;string&gt; nickname = GetOptionalUser().FlatMap(GetNickname);
// equivalent to both below:
nickname = GetOptionalUser().FlatMap(user =&gt; GetNickname(user));
nickname = GetOptionalUser().Map(user =&gt; GetNickname(user) /*Opt&lt;Opt&lt;string&gt;&gt;*/).Flatten();</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_FlatMap__1_1.htm">FlatMap<span id="LST94168003_28" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST94168003_29" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LST94168003_30" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T, Task<span id="LST94168003_31" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Opt<span id="LST94168003_32" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST94168003_33" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST94168003_34" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST94168003_35" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            (async version) 
            Returns None when IsNone; <span class="parameter">map</span>(val) when IsSome flattening the result.
            Shorthand combining Map and Flatten calls.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Opt&lt;User&gt; GetOptionalUser() {
    // method that tries to get the user, which can be omitted.
    ...
}
static Opt&lt;string&gt; GetNickname(User user) {
    // method that tries to get the nickname of the passed-in user; which is optional
    ...
}
Opt&lt;string&gt; nickname = GetOptionalUser().FlatMap(GetNickname);
// equivalent to both below:
nickname = GetOptionalUser().FlatMap(user =&gt; GetNickname(user));
nickname = GetOptionalUser().Map(user =&gt; GetNickname(user) /*Opt&lt;Opt&lt;string&gt;&gt;*/).Flatten();</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_GetHashCode.htm">GetHashCode</a></td><td>
            Serves as the default hash function.
            <br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode#system-valuetype-gethashcode" target="_blank" rel="noopener noreferrer">ValueType<span id="LST94168003_36" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>GetHashCode<span id="LST94168003_37" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype#system-object-gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_Map__1.htm">Map<span id="LST94168003_38" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST94168003_39" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Returns None when IsNone; Some(<span class="parameter">map</span>(Unwrap())) when IsSome.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// session will be None if the user is None; Some of a session for the user when Some.
Opt&lt;Session&gt; session = GetOptionalUser.Map(user =&gt; NewSession(user.Secrets));</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_MapAsync__1.htm">MapAsync<span id="LST94168003_40" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST94168003_41" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            (async version) 
            Returns None when IsNone; Some(<span class="parameter">map</span>(Unwrap())) when IsSome.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// session will be None if the user is None; Some of a session for the user when Some.
Opt&lt;Session&gt; session = GetOptionalUser.Map(user =&gt; NewSession(user.Secrets));</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_Match__1_1.htm">Match<span id="LST94168003_42" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST94168003_43" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LST94168003_44" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T, TOut<span id="LST94168003_45" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, TOut)</a></td><td>
            Maps into <span class="parameter">whenSome</span>(Unwrap()) whenever IsSome; and into <span class="parameter">whenNone</span> otherwise.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Opt&lt;User&gt; user = GetOptionalUser(..);
string greeting = user.Match(u =&gt; $"Welcome back {u.Name}", "Hello");
greeting = user.Match(whenSome: u =&gt; $"Welcome back {u.Name}", whenNone: "Hello");</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_Match__1.htm">Match<span id="LST94168003_46" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST94168003_47" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LST94168003_48" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T, TOut<span id="LST94168003_49" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LST94168003_50" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST94168003_51" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Maps into <span class="parameter">whenSome</span>(Unwrap()) whenever IsSome; and into lazy <span class="parameter">whenNone</span>() otherwise.
            Similar to <a href="M_Orx_Fun_Option_Opt_1_Match__1_1.htm">Match<span id="LST94168003_52" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST94168003_53" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LST94168003_54" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T, TOut<span id="LST94168003_55" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, TOut)</a> except that None variant is evaluated only when IsNone.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// assuming QueryAnonymousGreeting() is expensive.
Opt&lt;User&gt; user = GetOptionalUser(..);
string greeting = user.Match(u =&gt; $"Welcome back {u.Name}", () =&gt; QueryAnonymousGreeting());</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_MatchAsync__1.htm">MatchAsync<span id="LST94168003_56" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST94168003_57" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            (async version) 
            Maps into <span class="parameter">whenSome</span>(Unwrap()) whenever IsSome; and into lazy <span class="parameter">whenNone</span>() otherwise.
            Similar to <a href="M_Orx_Fun_Option_Opt_1_Match__1_1.htm">Match<span id="LST94168003_58" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST94168003_59" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LST94168003_60" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T, TOut<span id="LST94168003_61" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, TOut)</a> except that None variant is evaluated only when IsNone.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// assuming QueryAnonymousGreeting() is expensive.
Opt&lt;User&gt; user = GetOptionalUser(..);
string greeting = user.Match(u =&gt; $"Welcome back {u.Name}", () =&gt; QueryAnonymousGreeting());</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_MatchDo.htm">MatchDo</a></td><td>
            Executes <span class="parameter">whenSome</span>(Unwrap()) if IsSome; <span class="parameter">whenNone</span>() otherwise.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Greet(Opt&lt;User&gt; user) {
    user.MatchDo(
        whenSome: u =&gt; Console.WriteLine($"Welcome back {u.Name}"),
        whenNone: Console.WriteLine("Hello")
    );
}</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_Pure.htm">Pure</a></td><td>
            Simply returns Some&lt;T&gt; function: val =&gt; Some(val).
            Useful for composing functions of Opt&lt;T&gt; type.
            </td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_SomeIf.htm">SomeIf</a></td><td>
            Returns back None if IsNone.
            Otherwise, returns Some(value) if <span class="parameter">validationCriterion</span>(value) holds; None if it does not hold.
            Especially useful in fluent input validation.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Opt&lt;Account&gt; MaybeParseAccount(..) { }
static bool IsAccountNumberValid(int number) { }
static bool DoesAccountExist(string code) { }

var account = MaybeParseAccount(..)
                .Validate(acc =&gt; IsAccountNumberValid(acc.Number))
                .Validate(acc =&gt; DoesAccountExist(acc.Code));
// account will be Some(account) only if:
// - MaybeParseAccount returns Some(account), and further,
// - both IsAccountNumberValid and DoesAccountExist validation checks return true.</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_ThrowIfNone.htm">ThrowIfNone<span id="LST94168003_62" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Returns the option back when <a href="F_Orx_Fun_Option_Opt_1_IsSome.htm">IsSome</a>; throws a NullReferenceException when <a href="P_Orx_Fun_Option_Opt_1_IsNone.htm">IsNone</a>.
            Can be called without breaking the flow of chained operations.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var interestRate = GetOptionalUser(input)
    .ThrowIfNone("failed to get the user")
    .Map(user =&gt; ComputeInterestRate(user))
    .Unwrap();</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_ThrowIfNone_1.htm">ThrowIfNone(String)</a></td><td>
            Returns the option back when <a href="F_Orx_Fun_Option_Opt_1_IsSome.htm">IsSome</a>; throws a NullReferenceException when <a href="P_Orx_Fun_Option_Opt_1_IsNone.htm">IsNone</a>.
            Appends the <span class="parameter">errorMessage</span> to the exception if the message <a href="F_Orx_Fun_Option_Opt_1_IsSome.htm">IsSome</a>.
            Can be called without breaking the flow of chained operations.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var interestRate = GetOptionalUser(input)
    .ThrowIfNone("failed to get the user")
    .Map(user =&gt; ComputeInterestRate(user))
    .Unwrap();</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_ThrowIfNone__1.htm">ThrowIfNone<span id="LST94168003_63" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>E<span id="LST94168003_64" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LST94168003_65" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>E<span id="LST94168003_66" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the option back when <a href="F_Orx_Fun_Option_Opt_1_IsSome.htm">IsSome</a>; throws a custom exception when <a href="P_Orx_Fun_Option_Opt_1_IsNone.htm">IsNone</a>.
            Exception thrown when IsNone is created by the provided method <span class="parameter">getException</span>.
            Can be called without breaking the flow of chained operations.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var interestRate = GetOptionalUser(input)
    .ThrowIfNone(() =&gt; new ArithmeticException("sth went wrong"))
    .Map(user =&gt; ComputeInterestRate(user))
    .Unwrap();</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_ToString.htm">ToString</a></td><td>
            Returns the text representation of the option.
            <br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.valuetype.tostring#system-valuetype-tostring" target="_blank" rel="noopener noreferrer">ValueType<span id="LST94168003_67" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ToString<span id="LST94168003_68" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_Unwrap.htm">Unwrap<span id="LST94168003_69" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Returns the underlying value when <a href="F_Orx_Fun_Option_Opt_1_IsSome.htm">IsSome</a>; or throws when <a href="P_Orx_Fun_Option_Opt_1_IsNone.htm">IsNone</a>.
            Must be called shyly, as it is not necessary to unwrap until the final result is achieved due to Map, FlatMap and TryMap methods.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Opt&lt;int&gt; optAge = "42".ParseIntOrNone();
if (optAge.IsSome) {
    int age = optAge.Unwrap(); // use the uwrapped age
} else { // handle the None case
}</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_Unwrap_1.htm">Unwrap(String)</a></td><td>
            Similar to <a href="M_Orx_Fun_Option_Opt_1_Unwrap.htm">Unwrap<span id="LST94168003_70" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a> method except that the <span class="parameter">errorMessageIfNone</span> is appended to the error message if <a href="P_Orx_Fun_Option_Opt_1_IsNone.htm">IsNone</a>.
            </td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_UnwrapOr.htm">UnwrapOr(Func<span id="LST94168003_71" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST94168003_72" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the underlying value when <a href="F_Orx_Fun_Option_Opt_1_IsSome.htm">IsSome</a>; or returns <span class="parameter">lazyFallbackValue</span>() when <a href="P_Orx_Fun_Option_Opt_1_IsNone.htm">IsNone</a>.
            This is a safe way to unwrap the optional, by explicitly handling the None variant.
            Use the eager <a href="M_Orx_Fun_Option_Opt_1_UnwrapOr_1.htm">UnwrapOr(T)</a> variant if the fallback value is cheap or readily available.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static int GetCapacity(IEnumerable&lt;T&gt; collection, Opt&lt;int&gt; givenCapacity) {
    // capacity will be either the givenCapacity, or the number of elements in the collection.
    // note that, collection.Count() might be expensive requiring linear search.
    // lazy call avoids this call when givenCapacity.IsSome.
    return givenCapacity.UnwrapOr(() =&gt; collection.Count());
}</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_UnwrapOr_1.htm">UnwrapOr(T)</a></td><td>
            Returns the underlying value when <a href="F_Orx_Fun_Option_Opt_1_IsSome.htm">IsSome</a>; or returns the <span class="parameter">fallbackValue</span> when <a href="P_Orx_Fun_Option_Opt_1_IsNone.htm">IsNone</a>.
            This is a safe way to unwrap the optional, by explicitly handling the None variant.
            Use the lazy <a href="M_Orx_Fun_Option_Opt_1_UnwrapOr.htm">UnwrapOr(Func<span id="LST94168003_73" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST94168003_74" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a> variant if the computation of the fallback value is expensive.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Assert(Some(42).UnwrapOr(7) == 42);
Assert(None&lt;int&gt;().UnwrapOr(7) == 7);</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_UnwrapOrAsync.htm">UnwrapOrAsync</a></td><td>
            (async version)
            
            Returns the underlying value when <a href="F_Orx_Fun_Option_Opt_1_IsSome.htm">IsSome</a>; or returns <span class="parameter">lazyFallbackValue</span>() when <a href="P_Orx_Fun_Option_Opt_1_IsNone.htm">IsNone</a>.
            This is a safe way to unwrap the optional, by explicitly handling the None variant.
            Use the eager <a href="M_Orx_Fun_Option_Opt_1_UnwrapOr_1.htm">UnwrapOr(T)</a> variant if the fallback value is cheap or readily available.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static int GetCapacity(IEnumerable&lt;T&gt; collection, Opt&lt;int&gt; givenCapacity) {
    // capacity will be either the givenCapacity, or the number of elements in the collection.
    // note that, collection.Count() might be expensive requiring linear search.
    // lazy call avoids this call when givenCapacity.IsSome.
    return givenCapacity.UnwrapOr(() =&gt; collection.Count());
}</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Operators</h2><div id="IDOGASection"><table id="OperatorList" class="table is-hoverable"><tr><td><a href="M_Orx_Fun_Option_Opt_1_op_Equality.htm">Equality(Opt<span id="LST94168003_75" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST94168003_76" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LST94168003_77" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST94168003_78" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns true if both values are <a href="F_Orx_Fun_Option_Opt_1_IsSome.htm">IsSome</a> and their unwrapped values are equal; false otherwise.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">AssertEqual(None&lt;int&gt;() == None&lt;int&gt;(), false);
AssertEqual(None&lt;int&gt;() == Some(42), false);
AssertEqual(Some(42) == None&lt;int&gt;(), false);
AssertEqual(Some(42) == Some(7), false);
AssertEqual(Some(42) == Some(42), true);</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Option_Opt_1_op_Inequality.htm">Inequality(Opt<span id="LST94168003_79" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST94168003_80" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LST94168003_81" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST94168003_82" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns true if either value is <a href="P_Orx_Fun_Option_Opt_1_IsNone.htm">IsNone</a> or their unwrapped values are not equal; false otherwise.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">AssertEqual(None&lt;int&gt;() != None&lt;int&gt;(), true);
AssertEqual(None&lt;int&gt;() != Some(42), true);
AssertEqual(Some(42) != None&lt;int&gt;(), true);
AssertEqual(Some(42) != Some(7), true);
AssertEqual(Some(42) != Some(42), false);</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Fields</h2><div id="IDAGASection"><table id="FieldList" class="table is-hoverable"><tr><td><a href="F_Orx_Fun_Option_Opt_1_IsSome.htm">IsSome</a></td><td>
            Returns whether the option has Some value or not.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var someInt = Some(12);
Assert(noneInt.IsNone);</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="N_Orx_Fun_Option.htm">Orx.Fun.Option Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Constructors</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Operators</a></li><li><a class="quickLink">Fields</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column">https://github.com/orxfun/orx-fun-option<div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:orx.ugur.arikan%40gmail.com?Subject=Orx.Fun.Option%20(C#)">orx.ugur.arikan@gmail.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>